/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package net.stefanodellafiore.ifttt.api;

import io.swagger.annotations.*;
import net.stefanodellafiore.ifttt.model.CrdsvcErrors;
import net.stefanodellafiore.ifttt.model.CrdsvcInlineResponse200;
import net.stefanodellafiore.ifttt.model.CrdsvcInlineResponse2001;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-13T19:12:43.742+02:00")

@Api(value = "triggers", description = "the triggers API")
public interface TriggersApi {

    @ApiOperation(value = "", nickname = "triggersAuthorizationRequestPerformedFieldsCardOptionsPost", notes = "", response = CrdsvcInlineResponse2001.class, authorizations = {
        @Authorization(value = "ifttt_service_key")
    }, tags={ "Triggers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Options for the field.", response = CrdsvcInlineResponse2001.class),
        @ApiResponse(code = 400, message = "There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.", response = CrdsvcErrors.class),
        @ApiResponse(code = 401, message = "IFTTT sent an OAuth2 access token that isn’t valid.", response = CrdsvcErrors.class),
        @ApiResponse(code = 404, message = "IFTTT is trying to reach a URL that doesn’t exist.", response = CrdsvcErrors.class),
        @ApiResponse(code = 429, message = "IFTTT has sent too many requests in a given amount of time.", response = CrdsvcErrors.class),
        @ApiResponse(code = 500, message = "There was an error in your application logic.", response = CrdsvcErrors.class),
        @ApiResponse(code = 503, message = "Your service is not available at the moment, but IFTTT should try again later.", response = CrdsvcErrors.class) })
    @RequestMapping(value = "/triggers/authorization_request_performed/fields/card/options",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CrdsvcInlineResponse2001> triggersAuthorizationRequestPerformedFieldsCardOptionsPost(@ApiParam(value = "" , allowableValues="application/json") @RequestHeader(value="Accept", required=false) String accept,@ApiParam(value = "" , allowableValues="utf-8") @RequestHeader(value="Accept-Charset", required=false) String acceptCharset,@ApiParam(value = "" , allowableValues="gzip, deflate") @RequestHeader(value="Accept-Encoding", required=false) List<String> acceptEncoding,@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) String xRequestID);


    @ApiOperation(value = "", nickname = "triggersAuthorizationRequestPerformedPost", notes = "", response = CrdsvcInlineResponse200.class, authorizations = {
        @Authorization(value = "ifttt_service_key")
    }, tags={ "Triggers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Trigger response for authorization_request_performed.", response = CrdsvcInlineResponse200.class),
        @ApiResponse(code = 400, message = "There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.", response = CrdsvcErrors.class),
        @ApiResponse(code = 401, message = "IFTTT sent an OAuth2 access token that isn’t valid.", response = CrdsvcErrors.class),
        @ApiResponse(code = 404, message = "IFTTT is trying to reach a URL that doesn’t exist.", response = CrdsvcErrors.class),
        @ApiResponse(code = 429, message = "IFTTT has sent too many requests in a given amount of time.", response = CrdsvcErrors.class),
        @ApiResponse(code = 500, message = "There was an error in your application logic.", response = CrdsvcErrors.class),
        @ApiResponse(code = 503, message = "Your service is not available at the moment, but IFTTT should try again later.", response = CrdsvcErrors.class) })
    @RequestMapping(value = "/triggers/authorization_request_performed",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CrdsvcInlineResponse200> triggersAuthorizationRequestPerformedPost(@ApiParam(value = "Trigger request for authorization_request_performed." ,required=true )  @Valid @RequestBody Object body,@ApiParam(value = "" , allowableValues="application/json") @RequestHeader(value="Accept", required=false) String accept,@ApiParam(value = "" , allowableValues="utf-8") @RequestHeader(value="Accept-Charset", required=false) String acceptCharset,@ApiParam(value = "" , allowableValues="gzip, deflate") @RequestHeader(value="Accept-Encoding", required=false) List<String> acceptEncoding,@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) String xRequestID);

}
